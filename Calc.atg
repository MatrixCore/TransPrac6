using Library;
using System.Collections.Generic;

COMPILER Calc $NC
//  GROUP B: William Carpenter-Frank, Ryan McDonald, Matthew Pitcairn

const int         
noType   = 0,         
intType  = 1,         
boolType = 2; 

public struct MyVar
{
	public string Name;
	public int Type; //NoType = 0, IntType = 1, BoolType = 2
	public int Value;

	public MyVar(string name, int type, int val)
		{
			Name = name;
			Type = type;
			Value = val;
		}
}
static List<MyVar> SymTable = new List<MyVar>();

static bool VarExists(string name) {
	foreach (MyVar temp in SymTable)
	{
		if (name == temp.Name) return true;
	}
	return false;
}

static void VarAdd (MyVar ToAdd) {
	if (!(VarExists(ToAdd.Name))) { SymTable.Add(ToAdd); }
	else
	{
		foreach (MyVar temp in SymTable)
		{
			if (temp.Name == ToAdd.Name)
			{
				SymTable.Remove(temp);
				SymTable.Add(ToAdd);
			}
		}
	}
}

static int VarGet(string name) {
	if (VarExists(name))
	{
		foreach (MyVar temp in SymTable)
		{
			if (name == temp.Name) return temp.Value;
		}
	}
	return -1;
}

static int VarGetType(string name) {
	if (VarExists(name))
	{
		foreach (MyVar temp in SymTable)
		{
			if (name == temp.Name) return temp.Type;
		}
	}
	return -1;
}

static bool VarCompatible (MyVar Uno, MyVar Dos)     
{
	if (Uno.Type != Dos.Type)
	{
		return false;
	}
	return true;
}

static int ToInt(bool b) {
// return 0 or 1 according as b is false or true
  return b ? 1 : 0;
} // ToInt

static bool ToBool(int i) {
// return false or true according as i is 0 or 1
  return i == 0 ? false : true;
} // ToBool

CHARACTERS
  digit      = "0123456789" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .

TOKENS
  number     = digit { digit } .
  identifier = letter { letter | digit } .

IGNORE CHR(0) .. CHR(31)

PRODUCTIONS
  Calc		
  =
  { Print 
  | (. MyVar final = new MyVar("", 0, 0); .)
    Assignment<out final> (. VarAdd(final); .)
  } "quit"
  .

  Assignment <out MyVar goal> (. goal = new MyVar("", 0 , 0); string name = ""; MyVar value; .)
  =
  Variable <out name> (. goal.Name = name; .)
  "="
  Expression<out value> (. goal.Value = value.Value; goal.Type=value.Type; .)
  SYNC ";" 				
  .

  Print 
  =
  "print" (. MyVar value = new MyVar("", 0 , 0); .) 
  Expression<out value> (. if(value.Type==0){IO.WriteLine(VarGet(value.Name));}
								IO.WriteLine(value.Value); .)
  { WEAK ","
    Expression<out value>(. if(value.Type==0){IO.WriteLine(VarGet(value.Name));}
								IO.WriteLine(value.Value); .)
  }
  SYNC ";" 
  .

  Expression<out MyVar EValue>    (. EValue = new MyVar("", 0 , 0); MyVar andValue, otherVal; .)
  =								 
  AndExp<out andValue>			(. EValue= andValue; .)		
  { "||"						
    AndExp<out otherVal> 		(. if(ToBool(andValue.Value)){EValue.Value = andValue.Value; EValue.Type = boolType;}
										else {EValue.Value = otherVal.Value; EValue.Type = boolType;}.)
  } . 							

  AndExp<out MyVar andValue> 		(. andValue = new MyVar("", 0 , 0); MyVar otherEqualVal, equalValue; .)
  =
  EqlExp<out equalValue>	  	(. andValue= equalValue; .)
  { "&&"					   
    EqlExp<out otherEqualVal>  (. if(ToBool(equalValue.Value)){andValue.Value = otherEqualVal.Value; andValue.Type = boolType;}
									else{andValue.Value = 0; andValue.Type = boolType;}.)
  } .

  EqlExp<out MyVar equalValue> (. equalValue = new MyVar("", 0 , 0); MyVar relValue, otherRelVal; string EqlSym;.)
  =
  RelExp<out relValue>		  (. equalValue = relValue; .)
  { EqlOp <out EqlSym>
    RelExp<out otherRelVal>  (. if (EqlSym == "==") { equalValue.Value = ToInt(ToBool(relValue.Value) == ToBool(otherRelVal.Value)); equalValue.Type = boolType; }
									else { equalValue.Value = ToInt(ToBool(relValue.Value) != ToBool(otherRelVal.Value)); equalValue.Type = boolType;} .) 
  } .

  RelExp<out MyVar relValue> (. relValue = new MyVar("", 0 , 0); MyVar addValue, OtherAddVal; string relSym; .)
  =
  AddExp<out addValue>		(. relValue = addValue; .)
  [ RelOp<out relSym>
    AddExp<out OtherAddVal>	(.	switch (relSym)
							{
								case "<":
									relValue.Value = ToInt(addValue.Value < OtherAddVal.Value); relValue.Type = boolType;
									break;
								case "<=":
									relValue.Value = ToInt(addValue.Value <= OtherAddVal.Value); relValue.Type = boolType;
									break;
								case ">":
									relValue.Value = ToInt(addValue.Value > OtherAddVal.Value); relValue.Type = boolType;
									break;
								case ">=":
									relValue.Value = ToInt(addValue.Value >= OtherAddVal.Value); relValue.Type = boolType;
									break;
							}	.)
  ] .

  AddExp<out MyVar addValue> (. addValue = new MyVar("", 0 , 0); MyVar multValue, otherMulVal; string addOp; .)
  =
  MultExp<out multValue> (. addValue = multValue; .)
  { AddOp<out addOp>
    MultExp<out otherMulVal>			(. if (addOp == "+") { addValue.Value = multValue.Value + otherMulVal.Value; addValue.Type = intType; } 
											   else { addValue.Value = multValue.Value - otherMulVal.Value; addValue.Type = intType; }  .)
  } .

  MultExp<out MyVar multValue> (. multValue = new MyVar("", 0 , 0); MyVar unaryValue, otherUnaryVal; string mulOp; .)
  =
  UnaryExp<out unaryValue>	(. multValue = unaryValue; .)
  { MulOp<out mulOp>
    UnaryExp<out otherUnaryVal> 		(. switch (mulOp)
										{
											case "*":
											multValue.Value = unaryValue.Value * otherUnaryVal.Value; multValue.Type = intType;
											break;
											case "/":
											if(otherUnaryVal.Value==0) {IO.WriteLine("CAN'T DIVIDE BY ZERO");}
												else {multValue.Value = unaryValue.Value / otherUnaryVal.Value; multValue.Type = intType;}
											break;
											case "%":
											multValue.Value = unaryValue.Value / otherUnaryVal.Value; multValue.Type = intType;
											break;
										}

										.)
  } .

  UnaryExp <out MyVar unaryExp> (. unaryExp = new MyVar("", 0 , 0); MyVar OtherUnaryExp; MyVar FactorValue; FactorValue.Value = 0; .)
  =   Factor<out FactorValue> 		  (. unaryExp = FactorValue; .)
    | "+" UnaryExp<out OtherUnaryExp> (. unaryExp = OtherUnaryExp; .)
    | "-" UnaryExp<out OtherUnaryExp> (. unaryExp.Value = - OtherUnaryExp.Value; unaryExp.Type = OtherUnaryExp.Type;.)
    | "!" UnaryExp<out OtherUnaryExp> (. unaryExp.Value = ToInt(!ToBool(OtherUnaryExp.Value)); unaryExp.Type = 2; .)
  .

  Factor<out MyVar FactorValue> (. FactorValue = new MyVar("", 0 , 0); string name = ""; int NumValue = 0; MyVar ExpVal; .)
  =
      Variable <out name>   (. if(VarExists(name)){FactorValue.Name = name; FactorValue.Value = VarGet(name); FactorValue.Type = VarGetType(name);}
									else {FactorValue.Name = name; FactorValue.Type = 0;} .) 
    | Number<out NumValue>	(. FactorValue.Value = NumValue; FactorValue.Type = intType; .)
    | "true"				(. FactorValue.Value = 1; FactorValue.Type = boolType; .)
    | "false"				(. FactorValue.Value = 0; FactorValue.Type = boolType; .)
    | "(" Expression<out ExpVal>
      ")" 					(. FactorValue.Value = ExpVal.Value; .)
  .

  Variable <out string name>
  =
  identifier (. name = token.val; .)
  .

  Number<out int numValue>
  =
  number  (. numValue = Convert.ToInt32(token.val); .)
  .

  MulOp<out string mulOp> (. mulOp = ""; .)
  =
      "*" (. mulOp = token.val; .)
    | "/" (. mulOp = token.val; .)
    | "%" (. mulOp = token.val; .)
    .

  AddOp<out string addOp> (. addOp = ""; .)
  =
      "+" (. addOp = token.val; .)
    | "-" (. addOp = token.val; .)
  .

  RelOp<out string relOp> (. relOp = ""; .)
  =
      "<"  (. relOp = token.val; .)
    | "<=" (. relOp = token.val; .)
    | ">"  (. relOp = token.val; .)
    | ">=" (. relOp = token.val; .)
  .

  EqlOp <out string eqlOp> (. eqlOp = ""; .)
  =
      "==" (. eqlOp = token.val; .)
    | "!=" (. eqlOp = token.val; .)
  .

END Calc.
