using Library;

COMPILER Calc $NC
//  GROUP B: William Carpenter-Frank, Ryan McDonald, Matthew Pitcairn

static int ToInt(bool b) {
// return 0 or 1 according as b is false or true
  return b ? 1 : 0;
} // ToInt

static bool ToBool(int i) {
// return false or true according as i is 0 or 1
  return i == 0 ? false : true;
} // ToBool

CHARACTERS
  digit      = "0123456789" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .

TOKENS
  number     = digit { digit } .
  identifier = letter { letter | digit } .

IGNORE CHR(0) .. CHR(31)

PRODUCTIONS
  Calc <out int final>
  =
  { Print 
  | Assignment<out final>
  } "quit"
  .

  Assignment <out int goal> (. int goal = 0; .)
  =
  Variable <out string name>
  "="
  Expression<out int value>
  SYNC ";"
  .

  Print 
  =
  "print" (. int value; .) 
  Expression<out value> 
  { WEAK ","
    Expression<out value>
  }
  SYNC ";" (. IO.WriteLine(value); .)
  .

  Expression<out int EValue>    (. EValue = 0; int andVal, otherVal; .)
  =								 
  AndExp<out andValue>			
  { "||"						
    AndExp<out otherVal> 		(. bool value1 = ToBool(andValue); bool value2 = ToBool(otherVal); .) // If you hit this production, convert the value coming up to a bool, otherwise it is a number
								(. EValue = ToInt(value1 || value2); .)
  } . 							

  AndExp<out int andValue> 		(. EValue = 0; int otherVal, equalValue; .)
  =
  EqlExp<out equalValue>	  
  { "&&"					   
    EqlExp<out otherEqualVal>  (. bool value1 = ToBool(equalValue); bool value2 = ToBool(otherVal); .) // If you hit this production, convert the value coming up to a bool, otherwise it is a number
							   (. andValue = ToInt(value1 && value2); .)
  } .

  EqlExp<out int equalValue>
  =
  RelExp<out relValue>		  
  { EqlOp 
    RelExp<out otherRelVal> 
  } .

  RelExp<out int relValue>
  =
  AddExp<out addValue>
  [ RelOp
    AddExp<out OtherAddVal>
  ] .

  AddExp<out int addValue>
  =
  MultExp<out multValue>
  { AddOp<out addOp>
    MultExp<out otherMulVal>			(. if (addOp == "+") { multValue += otherMulVal; } 
											   else { multValue -= otherMulVal; }  .)
  } .

  MultExp<out int multValue>
  =
  UnaryExp<out UnaryValue>
  { MulOp<out mulOp>
    UnaryExp<out otherUnaryVal>
  } .

  UnaryExp <out int UnaryExp> (. int OtherUnaryExp; .)
  =   Factor<out FactorValue> 		  (. UnaryExp = FactorValue; .)
    | "+" UnaryExp<out OtherUnaryExp> (. UnaryExp = FactorValue + OtherUnaryExp; .)
    | "-" UnaryExp<out OtherUnaryExp> (. UnaryExp = FactorValue - OtherUnaryExp; .)
    | "!" UnaryExp<out OtherUnaryExp> (. UnaryExp = ToInt(!ToBool(OtherUnaryExp; .)
  .

  Factor<out int FactorValue>
  =
      Variable <out string name>
    | Number<out NumValue>
    | "true"				(. FactorValue = 1; .)
    | "false"				(. FactorValue = 0; .)
    | "(" Expression<out ExpVal>
      ")"
  .

  Variable <out string name>
  =
  identifier (. name = token.val; .)
  .

  Number<out int NumValue>
  =
  number  (. NumValue = Convert.ToInt32(token.val); .)
  .

  MulOp<out string mulOp>
  =
      "*"
    | "/"
    | "%"
    .

  AddOp<out string addOp>
  =
      "+"
    | "-"
  .

  RelOp
  =
      "<"
    | "<="
    | ">"
    | ">="
  .

  EqlOp <>
  =
      "=="
    | "!="
  .

END Calc.
